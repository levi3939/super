产品需求文档（PRD）

一、项目概述

使用 Python 开发一个网页应用，用于处理订单数据。该应用包含三个主要功能和一个辅助功能，需要与 DeepSeek v2.5 大模型 API 交互，并使用 MySQL 数据库来存储和管理订单数据。

二、功能需求

2.1 辅助功能

2.1.1 日志记录

• 功能描述：在每次订单处理完成后，记录一条日志信息，便于追踪和审计。
• 日志格式：YYYY年MM月DD日HH点mm分 处理了X个订单，处理编号MM-DD-XX
• 示例：2024年9月28日14点28分 处理了13个订单，处理编号09-28-01

2.2 主要功能

2.2.1 订单输入和初步处理

输入方式：

• 用户可以通过 复制粘贴 长订单串。
• 或者 拖拽多个 Word 文档 到网页中。

处理步骤：

1. 订单分批：
• 描述：根据 DeepSeek v2.5 API 的限制，将订单数据按规定的字符数分批处理。
• 目的：避免一次向 API 输入过多字符，导致响应被截断或请求失败。
• 注意：需参考 API 文档（https://api-docs.deepseek.com/zh-cn/）确定每批的最大字符数。
2. 去除无效信息：
• 描述：使用 DeepSeek v2.5 API 对每批订单数据进行处理，删除无效信息。
3. 订单拆分与存储：
• 描述：将清洗后的订单串 拆分成单个订单。
• 存储方式：将每个订单以 字典 的形式保存到 MySQL 数据库中。

2.2.2 订单去重

• 功能描述：在数据库中检查并删除重复的订单，仅保留每个订单的一个实例。
• 实现方式：根据订单的唯一标识符（如订单号）进行去重。

2.2.3 订单解析

步骤：

1. 选择处理批次：
• 描述：用户可以根据 处理编号 选择需要解析的订单批次。
2. 订单解析：
• 描述：使用 DeepSeek v2.5 API 对选定的订单进行解析。
• 提取内容：
• 订单号
• 地址
• 其他相关信息
3. 结果更新：
• 描述：将提取的结果 更新回数据库 中对应的订单记录。

2.2.4 结果导出

功能描述：将解析后的订单结果导出为 Excel 文件。

导出选项：

1. 选择订单批次：
• 描述：用户可以根据 处理编号 选择需要导出的订单。
2. 导出路径：
• 描述：用户可以自行选择导出路径。
• 默认路径：默认导出到 桌面。

三、技术需求

• 编程语言：Python
• 数据库：MySQL
• 第三方 API：DeepSeek v2.5 大模型 API
• 前端框架（建议）：
• Flask 或 Django（用于构建网页应用）
• 文件处理：
• 描述：处理 Word 文档的上传和读取，支持 .doc 和 .docx 格式。

四、流程概述

4.1 订单输入

• 用户操作：在网页上 复制粘贴订单串 或 拖拽上传 Word 文档。
• 系统处理：
• 接收并验证输入的订单数据。
• 处理文件上传的安全性，验证文件类型和大小。

4.2 初步处理

1. 订单分批：
• 描述：根据 API 限制，将订单数据分批投入 API，避免请求失败。
2. 去除无效信息：
• 描述：调用 DeepSeek v2.5 API，清洗订单数据，删除无效信息。
3. 订单拆分：
• 描述：将清洗后的订单串拆分为 单个订单。
4. 数据存储：
• 描述：将每个订单以 字典 形式保存到 MySQL 数据库。
• 注意：在存储前对数据进行校验，确保数据完整性。
5. 日志记录：
• 描述：记录本次处理的订单数量和处理编号。

4.3 订单去重

• 描述：在数据库中检查重复订单，删除重复的订单记录，只保留一份。
• 实现方式：利用数据库的索引和唯一约束，或者通过查询 ORDER BY 和 GROUP BY 语句。

4.4 订单解析

1. 选择处理批次：
• 描述：用户根据 处理编号 选择需要解析的订单批次。
2. 调用 API 解析：
• 描述：调用 DeepSeek v2.5 API 对选定订单进行解析。
• 注意：同样需要分批处理，避免请求过大。
3. 提取关键信息：
• 描述：提取订单号、地址、科目、时间、要求、价格等关键信息。
4. 更新数据库：
• 描述：将提取的信息 更新回数据库 中的订单记录，这时表里应该有原始订单、订单号、地址、科目、时间、要求、价格等字段。

4.5 结果导出

• 描述：用户根据 处理编号 选择需要导出的订单。
• 导出：系统将选定的订单数据导出为 Excel 文件。
• 路径选择：用户可以选择导出的文件路径，默认保存到 桌面。
• 注意：在导出前验证数据的完整性和准确性。

五、性能优化


5.1 批量操作

• 描述：将订单数据分批处理，减少调用 API 和数据库的次数，降低系统开销。
• 实现方式：
• 在初步处理和解析阶段，将订单按一定数量分成批次进行处理。
• 对于数据库的插入和更新操作，使用批量操作（如 executemany），一次性写入多条记录。

5.2 数据库查询和更新优化

5.2.1 索引优化

• 描述：为关键字段（如原始订单、处理编号）创建索引，提高查询速度。
• 实现方式：
• 在数据库表设计时，为常用查询字段添加索引或设置为主键。

5.2.2 查询优化

• 描述：优化 SQL 查询语句，避免全表扫描。
• 实现方式：
• 使用参数化查询，防止 SQL 注入并提高执行效率。
• 在去重操作中，利用 DISTINCT、GROUP BY 等关键字。

5.2.3 连接池

• 描述：使用数据库连接池，避免频繁创建和关闭连接。
• 实现方式：
• 使用连接池管理库（如 SQLAlchemy、Peewee）配置数据库连接池。

5.4 API 调用优化

• 描述：优化与 DeepSeek v2.5 API 的交互，减少网络延迟和资源消耗。
• 实现方式：
• 合并请求：如果 API 支持批量处理，可在一次请求中发送多个订单的数据。
• 重试机制：对于失败的请求，设置合理的重试策略。
• 超时设置：为 API 请求设置超时时间，防止长时间等待。

